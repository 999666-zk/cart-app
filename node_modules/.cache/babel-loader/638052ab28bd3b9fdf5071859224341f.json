{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport { createNamespace, addUnit } from '../utils';\nimport { deepClone } from '../utils/deep-clone';\nimport { preventDefault } from '../utils/dom/event';\nimport { range, addNumber } from '../utils/format/number';\nimport { TouchMixin } from '../mixins/touch';\nimport { FieldMixin } from '../mixins/field';\n\nvar _createNamespace = createNamespace('slider'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1];\n\nvar isSameValue = function isSameValue(newValue, oldValue) {\n  return JSON.stringify(newValue) === JSON.stringify(oldValue);\n};\n\nexport default createComponent({\n  mixins: [TouchMixin, FieldMixin],\n  props: {\n    disabled: Boolean,\n    vertical: Boolean,\n    range: Boolean,\n    barHeight: [Number, String],\n    buttonSize: [Number, String],\n    activeColor: String,\n    inactiveColor: String,\n    min: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    max: {\n      type: [Number, String],\n      \"default\": 100\n    },\n    step: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    value: {\n      type: [Number, Array],\n      \"default\": 0\n    }\n  },\n  data: function data() {\n    return {\n      dragStatus: ''\n    };\n  },\n  computed: {\n    scope: function scope() {\n      return this.max - this.min;\n    },\n    buttonStyle: function buttonStyle() {\n      if (this.buttonSize) {\n        var size = addUnit(this.buttonSize);\n        return {\n          width: size,\n          height: size\n        };\n      }\n    }\n  },\n  created: function created() {\n    // format initial value\n    this.updateValue(this.value);\n  },\n  mounted: function mounted() {\n    if (this.range) {\n      this.bindTouchEvent(this.$refs.wrapper0);\n      this.bindTouchEvent(this.$refs.wrapper1);\n    } else {\n      this.bindTouchEvent(this.$refs.wrapper);\n    }\n  },\n  methods: {\n    onTouchStart: function onTouchStart(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      this.touchStart(event);\n      this.currentValue = this.value;\n\n      if (this.range) {\n        this.startValue = this.value.map(this.format);\n      } else {\n        this.startValue = this.format(this.value);\n      }\n\n      this.dragStatus = 'start';\n    },\n    onTouchMove: function onTouchMove(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      if (this.dragStatus === 'start') {\n        this.$emit('drag-start');\n      }\n\n      preventDefault(event, true);\n      this.touchMove(event);\n      this.dragStatus = 'draging';\n      var rect = this.$el.getBoundingClientRect();\n      var delta = this.vertical ? this.deltaY : this.deltaX;\n      var total = this.vertical ? rect.height : rect.width;\n      var diff = delta / total * this.scope;\n\n      if (this.range) {\n        this.currentValue[this.index] = this.startValue[this.index] + diff;\n      } else {\n        this.currentValue = this.startValue + diff;\n      }\n\n      this.updateValue(this.currentValue);\n    },\n    onTouchEnd: function onTouchEnd() {\n      if (this.disabled) {\n        return;\n      }\n\n      if (this.dragStatus === 'draging') {\n        this.updateValue(this.currentValue, true);\n        this.$emit('drag-end');\n      }\n\n      this.dragStatus = '';\n    },\n    onClick: function onClick(event) {\n      event.stopPropagation();\n      if (this.disabled) return;\n      var rect = this.$el.getBoundingClientRect();\n      var delta = this.vertical ? event.clientY - rect.top : event.clientX - rect.left;\n      var total = this.vertical ? rect.height : rect.width;\n      var value = +this.min + delta / total * this.scope;\n\n      if (this.range) {\n        var _this$value = this.value,\n            left = _this$value[0],\n            right = _this$value[1];\n        var middle = (left + right) / 2;\n\n        if (value <= middle) {\n          left = value;\n        } else {\n          right = value;\n        }\n\n        value = [left, right];\n      }\n\n      this.startValue = this.value;\n      this.updateValue(value, true);\n    },\n    // 处理两个滑块重叠之后的情况\n    handleOverlap: function handleOverlap(value) {\n      if (value[0] > value[1]) {\n        value = deepClone(value);\n        return value.reverse();\n      }\n\n      return value;\n    },\n    updateValue: function updateValue(value, end) {\n      if (this.range) {\n        value = this.handleOverlap(value).map(this.format);\n      } else {\n        value = this.format(value);\n      }\n\n      if (!isSameValue(value, this.value)) {\n        this.$emit('input', value);\n      }\n\n      if (end && !isSameValue(value, this.startValue)) {\n        this.$emit('change', value);\n      }\n    },\n    format: function format(value) {\n      var min = +this.min;\n      var max = +this.max;\n      var step = +this.step;\n      value = range(value, min, max);\n      var diff = Math.round((value - min) / step) * step;\n      return addNumber(min, diff);\n    }\n  },\n  render: function render() {\n    var _wrapperStyle,\n        _this = this,\n        _barStyle;\n\n    var h = arguments[0];\n    var vertical = this.vertical;\n    var mainAxis = vertical ? 'height' : 'width';\n    var crossAxis = vertical ? 'width' : 'height';\n    var wrapperStyle = (_wrapperStyle = {\n      background: this.inactiveColor\n    }, _wrapperStyle[crossAxis] = addUnit(this.barHeight), _wrapperStyle); // 计算选中条的长度百分比\n\n    var calcMainAxis = function calcMainAxis() {\n      var value = _this.value,\n          min = _this.min,\n          range = _this.range,\n          scope = _this.scope;\n\n      if (range) {\n        return (value[1] - value[0]) * 100 / scope + \"%\";\n      }\n\n      return (value - min) * 100 / scope + \"%\";\n    }; // 计算选中条的开始位置的偏移量\n\n\n    var calcOffset = function calcOffset() {\n      var value = _this.value,\n          min = _this.min,\n          range = _this.range,\n          scope = _this.scope;\n\n      if (range) {\n        return (value[0] - min) * 100 / scope + \"%\";\n      }\n\n      return null;\n    };\n\n    var barStyle = (_barStyle = {}, _barStyle[mainAxis] = calcMainAxis(), _barStyle.left = this.vertical ? null : calcOffset(), _barStyle.top = this.vertical ? calcOffset() : null, _barStyle.background = this.activeColor, _barStyle);\n\n    if (this.dragStatus) {\n      barStyle.transition = 'none';\n    }\n\n    var renderButton = function renderButton(i) {\n      var map = ['left', 'right'];\n      var isNumber = typeof i === 'number';\n      var current = isNumber ? _this.value[i] : _this.value;\n\n      var getClassName = function getClassName() {\n        if (isNumber) {\n          return \"button-wrapper-\" + map[i];\n        }\n\n        return \"button-wrapper\";\n      };\n\n      var getRefName = function getRefName() {\n        if (isNumber) {\n          return \"wrapper\" + i;\n        }\n\n        return \"wrapper\";\n      };\n\n      var renderButtonContent = function renderButtonContent() {\n        if (isNumber) {\n          var slot = _this.slots(i === 0 ? 'left-button' : 'right-button', {\n            value: current\n          });\n\n          if (slot) {\n            return slot;\n          }\n        }\n\n        if (_this.slots('button')) {\n          return _this.slots('button');\n        }\n\n        return h(\"div\", {\n          \"class\": bem('button'),\n          \"style\": _this.buttonStyle\n        });\n      };\n\n      return h(\"div\", {\n        \"ref\": getRefName(),\n        \"attrs\": {\n          \"role\": \"slider\",\n          \"tabindex\": _this.disabled ? -1 : 0,\n          \"aria-valuemin\": _this.min,\n          \"aria-valuenow\": _this.value,\n          \"aria-valuemax\": _this.max,\n          \"aria-orientation\": _this.vertical ? 'vertical' : 'horizontal'\n        },\n        \"class\": bem(getClassName()),\n        \"on\": {\n          \"touchstart\": function touchstart() {\n            if (isNumber) {\n              // 保存当前按钮的索引\n              _this.index = i;\n            }\n          },\n          \"click\": function click(e) {\n            return e.stopPropagation();\n          }\n        }\n      }, [renderButtonContent()]);\n    };\n\n    return h(\"div\", {\n      \"style\": wrapperStyle,\n      \"class\": bem({\n        disabled: this.disabled,\n        vertical: vertical\n      }),\n      \"on\": {\n        \"click\": this.onClick\n      }\n    }, [h(\"div\", {\n      \"class\": bem('bar'),\n      \"style\": barStyle\n    }, [this.range ? [renderButton(0), renderButton(1)] : renderButton()])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}