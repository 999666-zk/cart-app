{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.index-of.js\";\n// Utils\nimport { createNamespace } from '../../utils';\nimport { isEmail } from '../../utils/validate/email';\nimport { isNumeric } from '../../utils/validate/number'; // Components\n\nimport Cell from '../../cell';\nimport Field from '../../field';\nimport SkuImgUploader from './SkuImgUploader';\nimport SkuDateTimeField from './SkuDateTimeField';\n\nvar _createNamespace = createNamespace('sku-messages'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1],\n    t = _createNamespace[2];\n\nexport default createComponent({\n  props: {\n    messageConfig: Object,\n    goodsId: [Number, String],\n    messages: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      messageValues: this.resetMessageValues(this.messages)\n    };\n  },\n  watch: {\n    messages: function messages(val) {\n      this.messageValues = this.resetMessageValues(val);\n    }\n  },\n  methods: {\n    resetMessageValues: function resetMessageValues(messages) {\n      var messageConfig = this.messageConfig;\n      var _messageConfig$initia = messageConfig.initialMessages,\n          initialMessages = _messageConfig$initia === void 0 ? {} : _messageConfig$initia;\n      return (messages || []).map(function (message) {\n        return {\n          value: initialMessages[message.name] || ''\n        };\n      });\n    },\n    getType: function getType(message) {\n      if (+message.multiple === 1) {\n        return 'textarea';\n      }\n\n      if (message.type === 'id_no') {\n        return 'text';\n      }\n\n      return message.datetime > 0 ? 'datetime' : message.type;\n    },\n    getMessages: function getMessages() {\n      var messages = {};\n      this.messageValues.forEach(function (item, index) {\n        messages[\"message_\" + index] = item.value;\n      });\n      return messages;\n    },\n    getCartMessages: function getCartMessages() {\n      var _this = this;\n\n      var messages = {};\n      this.messageValues.forEach(function (item, index) {\n        var message = _this.messages[index];\n        messages[message.name] = item.value;\n      });\n      return messages;\n    },\n    getPlaceholder: function getPlaceholder(message) {\n      var type = +message.multiple === 1 ? 'textarea' : message.type;\n      var map = this.messageConfig.placeholderMap || {};\n      return message.placeholder || map[type] || t(\"placeholder.\" + type);\n    },\n    validateMessages: function validateMessages() {\n      var values = this.messageValues;\n\n      for (var i = 0; i < values.length; i++) {\n        var value = values[i].value;\n        var message = this.messages[i];\n\n        if (value === '') {\n          // 必填字段的校验\n          if (String(message.required) === '1') {\n            var textType = t(message.type === 'image' ? 'upload' : 'fill');\n            return textType + message.name;\n          }\n        } else {\n          if (message.type === 'tel' && !isNumeric(value)) {\n            return t('invalid.tel');\n          }\n\n          if (message.type === 'mobile' && !/^\\d{6,20}$/.test(value)) {\n            return t('invalid.mobile');\n          }\n\n          if (message.type === 'email' && !isEmail(value)) {\n            return t('invalid.email');\n          }\n\n          if (message.type === 'id_no' && (value.length < 15 || value.length > 18)) {\n            return t('invalid.id_no');\n          }\n        }\n      }\n    },\n\n    /**\n     * The phone number copied from IOS mobile phone address book\n     * will add spaces and invisible Unicode characters\n     * which cannot pass the /^\\d+$/ verification\n     * so keep numbers and dots\n     */\n    getFormatter: function getFormatter(message) {\n      return function formatter(value) {\n        if (message.type === 'mobile' || message.type === 'tel') {\n          return value.replace(/[^\\d.]/g, '');\n        }\n\n        return value;\n      };\n    },\n    getExtraDesc: function getExtraDesc(message) {\n      var h = this.$createElement;\n      var extraDesc = message.extraDesc;\n\n      if (extraDesc) {\n        return h(\"div\", {\n          \"class\": bem('extra-message')\n        }, [extraDesc]);\n      }\n    },\n    genMessage: function genMessage(message, index) {\n      var _this2 = this;\n\n      var h = this.$createElement;\n\n      if (message.type === 'image') {\n        return h(Cell, {\n          \"key\": this.goodsId + \"-\" + index,\n          \"attrs\": {\n            \"title\": message.name,\n            \"required\": String(message.required) === '1',\n            \"valueClass\": bem('image-cell-value')\n          },\n          \"class\": bem('image-cell')\n        }, [h(SkuImgUploader, {\n          \"attrs\": {\n            \"maxSize\": this.messageConfig.uploadMaxSize,\n            \"uploadImg\": this.messageConfig.uploadImg,\n            \"customUpload\": this.messageConfig.customUpload\n          },\n          \"model\": {\n            value: _this2.messageValues[index].value,\n            callback: function callback($$v) {\n              _this2.$set(_this2.messageValues[index], \"value\", $$v);\n            }\n          }\n        }), h(\"div\", {\n          \"class\": bem('image-cell-label')\n        }, [t('imageLabel')])]);\n      } // 时间和日期使用的vant选择器\n\n\n      var isDateOrTime = ['date', 'time'].indexOf(message.type) > -1;\n\n      if (isDateOrTime) {\n        return h(SkuDateTimeField, {\n          \"attrs\": {\n            \"label\": message.name,\n            \"required\": String(message.required) === '1',\n            \"placeholder\": this.getPlaceholder(message),\n            \"type\": this.getType(message)\n          },\n          \"key\": this.goodsId + \"-\" + index,\n          \"model\": {\n            value: _this2.messageValues[index].value,\n            callback: function callback($$v) {\n              _this2.$set(_this2.messageValues[index], \"value\", $$v);\n            }\n          }\n        });\n      }\n\n      return h(\"div\", {\n        \"class\": bem('cell-block')\n      }, [h(Field, {\n        \"attrs\": {\n          \"maxlength\": \"200\",\n          \"center\": !message.multiple,\n          \"label\": message.name,\n          \"required\": String(message.required) === '1',\n          \"placeholder\": this.getPlaceholder(message),\n          \"type\": this.getType(message),\n          \"formatter\": this.getFormatter(message),\n          \"border\": false\n        },\n        \"key\": this.goodsId + \"-\" + index,\n        \"model\": {\n          value: _this2.messageValues[index].value,\n          callback: function callback($$v) {\n            _this2.$set(_this2.messageValues[index], \"value\", $$v);\n          }\n        }\n      }), this.getExtraDesc(message)]);\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(\"div\", {\n      \"class\": bem()\n    }, [this.messages.map(this.genMessage)]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}