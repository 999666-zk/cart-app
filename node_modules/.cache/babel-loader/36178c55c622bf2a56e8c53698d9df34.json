{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\"; // Utils\n\nimport { createNamespace, addUnit } from '../utils';\nimport { BORDER } from '../utils/constant';\nimport { route, routeProps } from '../utils/router'; // Mixins\n\nimport { ChildrenMixin } from '../mixins/relation'; // Components\n\nimport Info from '../info';\nimport Icon from '../icon';\n\nvar _createNamespace = createNamespace('grid-item'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1];\n\nexport default createComponent({\n  mixins: [ChildrenMixin('vanGrid')],\n  props: _extends({}, routeProps, {\n    dot: Boolean,\n    text: String,\n    icon: String,\n    iconPrefix: String,\n    // @deprecated\n    info: [Number, String],\n    badge: [Number, String]\n  }),\n  computed: {\n    style: function style() {\n      var _this$parent = this.parent,\n          square = _this$parent.square,\n          gutter = _this$parent.gutter,\n          columnNum = _this$parent.columnNum;\n      var percent = 100 / columnNum + \"%\";\n      var style = {\n        flexBasis: percent\n      };\n\n      if (square) {\n        style.paddingTop = percent;\n      } else if (gutter) {\n        var gutterValue = addUnit(gutter);\n        style.paddingRight = gutterValue;\n\n        if (this.index >= columnNum) {\n          style.marginTop = gutterValue;\n        }\n      }\n\n      return style;\n    },\n    contentStyle: function contentStyle() {\n      var _this$parent2 = this.parent,\n          square = _this$parent2.square,\n          gutter = _this$parent2.gutter;\n\n      if (square && gutter) {\n        var gutterValue = addUnit(gutter);\n        return {\n          right: gutterValue,\n          bottom: gutterValue,\n          height: 'auto'\n        };\n      }\n    }\n  },\n  methods: {\n    onClick: function onClick(event) {\n      this.$emit('click', event);\n      route(this.$router, this);\n    },\n    genIcon: function genIcon() {\n      var _this$badge;\n\n      var h = this.$createElement;\n      var iconSlot = this.slots('icon');\n      var info = (_this$badge = this.badge) != null ? _this$badge : this.info;\n\n      if (process.env.NODE_ENV === 'development' && this.info) {\n        console.warn('[Vant] GridItem: \"info\" prop is deprecated, use \"badge\" prop instead.');\n      }\n\n      if (iconSlot) {\n        return h(\"div\", {\n          \"class\": bem('icon-wrapper')\n        }, [iconSlot, h(Info, {\n          \"attrs\": {\n            \"dot\": this.dot,\n            \"info\": info\n          }\n        })]);\n      }\n\n      if (this.icon) {\n        return h(Icon, {\n          \"attrs\": {\n            \"name\": this.icon,\n            \"dot\": this.dot,\n            \"badge\": info,\n            \"size\": this.parent.iconSize,\n            \"classPrefix\": this.iconPrefix\n          },\n          \"class\": bem('icon')\n        });\n      }\n    },\n    getText: function getText() {\n      var h = this.$createElement;\n      var textSlot = this.slots('text');\n\n      if (textSlot) {\n        return textSlot;\n      }\n\n      if (this.text) {\n        return h(\"span\", {\n          \"class\": bem('text')\n        }, [this.text]);\n      }\n    },\n    genContent: function genContent() {\n      var slot = this.slots();\n\n      if (slot) {\n        return slot;\n      }\n\n      return [this.genIcon(), this.getText()];\n    }\n  },\n  render: function render() {\n    var _ref;\n\n    var h = arguments[0];\n    var _this$parent3 = this.parent,\n        center = _this$parent3.center,\n        border = _this$parent3.border,\n        square = _this$parent3.square,\n        gutter = _this$parent3.gutter,\n        direction = _this$parent3.direction,\n        clickable = _this$parent3.clickable;\n    return h(\"div\", {\n      \"class\": [bem({\n        square: square\n      })],\n      \"style\": this.style\n    }, [h(\"div\", {\n      \"style\": this.contentStyle,\n      \"attrs\": {\n        \"role\": clickable ? 'button' : null,\n        \"tabindex\": clickable ? 0 : null\n      },\n      \"class\": [bem('content', [direction, {\n        center: center,\n        square: square,\n        clickable: clickable,\n        surround: border && gutter\n      }]), (_ref = {}, _ref[BORDER] = border, _ref)],\n      \"on\": {\n        \"click\": this.onClick\n      }\n    }, [this.genContent()])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}