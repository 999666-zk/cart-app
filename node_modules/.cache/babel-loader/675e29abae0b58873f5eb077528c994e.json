{"ast":null,"code":"import \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { createNamespace } from '../utils';\nimport { RED } from '../utils/constant';\nimport { padZero } from '../utils/format/string';\nimport Checkbox from '../checkbox';\n\nvar _createNamespace = createNamespace('coupon'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1],\n    t = _createNamespace[2];\n\nfunction formatTimeStamp(timeStamp) {\n  // compatible when the timestamp is seconds\n  if (timeStamp < Math.pow(10, 12)) {\n    return timeStamp * 1000;\n  }\n\n  return +timeStamp;\n}\n\nfunction getDate(timeStamp) {\n  var date = new Date(formatTimeStamp(timeStamp));\n  return date.getFullYear() + \".\" + padZero(date.getMonth() + 1) + \".\" + padZero(date.getDate());\n}\n\nfunction formatDiscount(discount) {\n  return (discount / 10).toFixed(discount % 10 === 0 ? 0 : 1);\n}\n\nfunction formatAmount(amount) {\n  return (amount / 100).toFixed(amount % 100 === 0 ? 0 : amount % 10 === 0 ? 1 : 2);\n}\n\nexport default createComponent({\n  props: {\n    coupon: Object,\n    chosen: Boolean,\n    disabled: Boolean,\n    currency: {\n      type: String,\n      \"default\": 'Â¥'\n    }\n  },\n  computed: {\n    validPeriod: function validPeriod() {\n      var _this$coupon = this.coupon,\n          startAt = _this$coupon.startAt,\n          endAt = _this$coupon.endAt,\n          customValidPeriod = _this$coupon.customValidPeriod;\n      return customValidPeriod || getDate(startAt) + \" - \" + getDate(endAt);\n    },\n    faceAmount: function faceAmount() {\n      var coupon = this.coupon;\n\n      if (coupon.valueDesc) {\n        return coupon.valueDesc + \"<span>\" + (coupon.unitDesc || '') + \"</span>\";\n      }\n\n      if (coupon.denominations) {\n        var denominations = formatAmount(coupon.denominations);\n        return \"<span>\" + this.currency + \"</span> \" + denominations;\n      }\n\n      if (coupon.discount) {\n        return t('discount', formatDiscount(coupon.discount));\n      }\n\n      return '';\n    },\n    conditionMessage: function conditionMessage() {\n      var condition = formatAmount(this.coupon.originCondition);\n      return condition === '0' ? t('unlimited') : t('condition', condition);\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var coupon = this.coupon,\n        disabled = this.disabled;\n    var description = disabled && coupon.reason || coupon.description;\n    return h(\"div\", {\n      \"class\": bem({\n        disabled: disabled\n      })\n    }, [h(\"div\", {\n      \"class\": bem('content')\n    }, [h(\"div\", {\n      \"class\": bem('head')\n    }, [h(\"h2\", {\n      \"class\": bem('amount'),\n      \"domProps\": {\n        \"innerHTML\": this.faceAmount\n      }\n    }), h(\"p\", {\n      \"class\": bem('condition')\n    }, [this.coupon.condition || this.conditionMessage])]), h(\"div\", {\n      \"class\": bem('body')\n    }, [h(\"p\", {\n      \"class\": bem('name')\n    }, [coupon.name]), h(\"p\", {\n      \"class\": bem('valid')\n    }, [this.validPeriod]), !this.disabled && h(Checkbox, {\n      \"attrs\": {\n        \"size\": 18,\n        \"value\": this.chosen,\n        \"checkedColor\": RED\n      },\n      \"class\": bem('corner')\n    })])]), description && h(\"p\", {\n      \"class\": bem('description')\n    }, [description])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}