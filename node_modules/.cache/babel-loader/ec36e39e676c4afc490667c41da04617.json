{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { createNamespace } from '../utils';\nimport Tab from '../tab';\nimport Tabs from '../tabs';\nimport Icon from '../icon';\n\nvar _createNamespace = createNamespace('cascader'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1],\n    t = _createNamespace[2];\n\nexport default createComponent({\n  props: {\n    title: String,\n    value: [Number, String],\n    fieldNames: Object,\n    placeholder: String,\n    activeColor: String,\n    options: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    closeable: {\n      type: Boolean,\n      \"default\": true\n    },\n    showHeader: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  data: function data() {\n    return {\n      tabs: [],\n      activeTab: 0\n    };\n  },\n  computed: {\n    textKey: function textKey() {\n      var _this$fieldNames;\n\n      return ((_this$fieldNames = this.fieldNames) == null ? void 0 : _this$fieldNames.text) || 'text';\n    },\n    valueKey: function valueKey() {\n      var _this$fieldNames2;\n\n      return ((_this$fieldNames2 = this.fieldNames) == null ? void 0 : _this$fieldNames2.value) || 'value';\n    },\n    childrenKey: function childrenKey() {\n      var _this$fieldNames3;\n\n      return ((_this$fieldNames3 = this.fieldNames) == null ? void 0 : _this$fieldNames3.children) || 'children';\n    }\n  },\n  watch: {\n    options: {\n      deep: true,\n      handler: 'updateTabs'\n    },\n    value: function value(_value) {\n      var _this = this;\n\n      if (_value || _value === 0) {\n        var values = this.tabs.map(function (tab) {\n          var _tab$selectedOption;\n\n          return (_tab$selectedOption = tab.selectedOption) == null ? void 0 : _tab$selectedOption[_this.valueKey];\n        });\n\n        if (values.indexOf(_value) !== -1) {\n          return;\n        }\n      }\n\n      this.updateTabs();\n    }\n  },\n  created: function created() {\n    this.updateTabs();\n  },\n  methods: {\n    getSelectedOptionsByValue: function getSelectedOptionsByValue(options, value) {\n      for (var i = 0; i < options.length; i++) {\n        var option = options[i];\n\n        if (option[this.valueKey] === value) {\n          return [option];\n        }\n\n        if (option[this.childrenKey]) {\n          var selectedOptions = this.getSelectedOptionsByValue(option[this.childrenKey], value);\n\n          if (selectedOptions) {\n            return [option].concat(selectedOptions);\n          }\n        }\n      }\n    },\n    updateTabs: function updateTabs() {\n      var _this2 = this;\n\n      if (this.value || this.value === 0) {\n        var selectedOptions = this.getSelectedOptionsByValue(this.options, this.value);\n\n        if (selectedOptions) {\n          var optionsCursor = this.options;\n          this.tabs = selectedOptions.map(function (option) {\n            var tab = {\n              options: optionsCursor,\n              selectedOption: option\n            };\n            var next = optionsCursor.filter(function (item) {\n              return item[_this2.valueKey] === option[_this2.valueKey];\n            });\n\n            if (next.length) {\n              optionsCursor = next[0][_this2.childrenKey];\n            }\n\n            return tab;\n          });\n\n          if (optionsCursor) {\n            this.tabs.push({\n              options: optionsCursor,\n              selectedOption: null\n            });\n          }\n\n          this.$nextTick(function () {\n            _this2.activeTab = _this2.tabs.length - 1;\n          });\n          return;\n        }\n      }\n\n      this.tabs = [{\n        options: this.options,\n        selectedOption: null\n      }];\n    },\n    onSelect: function onSelect(option, tabIndex) {\n      var _this3 = this;\n\n      this.tabs[tabIndex].selectedOption = option;\n\n      if (this.tabs.length > tabIndex + 1) {\n        this.tabs = this.tabs.slice(0, tabIndex + 1);\n      }\n\n      if (option[this.childrenKey]) {\n        var nextTab = {\n          options: option[this.childrenKey],\n          selectedOption: null\n        };\n\n        if (this.tabs[tabIndex + 1]) {\n          this.$set(this.tabs, tabIndex + 1, nextTab);\n        } else {\n          this.tabs.push(nextTab);\n        }\n\n        this.$nextTick(function () {\n          _this3.activeTab++;\n        });\n      }\n\n      var selectedOptions = this.tabs.map(function (tab) {\n        return tab.selectedOption;\n      }).filter(function (item) {\n        return !!item;\n      });\n      var eventParams = {\n        value: option[this.valueKey],\n        tabIndex: tabIndex,\n        selectedOptions: selectedOptions\n      };\n      this.$emit('input', option[this.valueKey]);\n      this.$emit('change', eventParams);\n\n      if (!option[this.childrenKey]) {\n        this.$emit('finish', eventParams);\n      }\n    },\n    onClose: function onClose() {\n      this.$emit('close');\n    },\n    renderHeader: function renderHeader() {\n      var h = this.$createElement;\n\n      if (this.showHeader) {\n        return h(\"div\", {\n          \"class\": bem('header')\n        }, [h(\"h2\", {\n          \"class\": bem('title')\n        }, [this.slots('title') || this.title]), this.closeable ? h(Icon, {\n          \"attrs\": {\n            \"name\": \"cross\"\n          },\n          \"class\": bem('close-icon'),\n          \"on\": {\n            \"click\": this.onClose\n          }\n        }) : null]);\n      }\n    },\n    renderOptions: function renderOptions(options, selectedOption, tabIndex) {\n      var _this4 = this;\n\n      var h = this.$createElement;\n\n      var renderOption = function renderOption(option) {\n        var isSelected = selectedOption && option[_this4.valueKey] === selectedOption[_this4.valueKey];\n        var Text = _this4.slots('option', {\n          option: option,\n          selected: isSelected\n        }) || h(\"span\", [option[_this4.textKey]]);\n        return h(\"li\", {\n          \"class\": bem('option', {\n            selected: isSelected\n          }),\n          \"style\": {\n            color: isSelected ? _this4.activeColor : null\n          },\n          \"on\": {\n            \"click\": function click() {\n              _this4.onSelect(option, tabIndex);\n            }\n          }\n        }, [Text, isSelected ? h(Icon, {\n          \"attrs\": {\n            \"name\": \"success\"\n          },\n          \"class\": bem('selected-icon')\n        }) : null]);\n      };\n\n      return h(\"ul\", {\n        \"class\": bem('options')\n      }, [options.map(renderOption)]);\n    },\n    renderTab: function renderTab(item, tabIndex) {\n      var h = this.$createElement;\n      var options = item.options,\n          selectedOption = item.selectedOption;\n      var title = selectedOption ? selectedOption[this.textKey] : this.placeholder || t('select');\n      return h(Tab, {\n        \"attrs\": {\n          \"title\": title,\n          \"titleClass\": bem('tab', {\n            unselected: !selectedOption\n          })\n        }\n      }, [this.renderOptions(options, selectedOption, tabIndex)]);\n    },\n    renderTabs: function renderTabs() {\n      var _this5 = this;\n\n      var h = this.$createElement;\n      return h(Tabs, {\n        \"attrs\": {\n          \"animated\": true,\n          \"swipeable\": true,\n          \"swipeThreshold\": 0,\n          \"color\": this.activeColor\n        },\n        \"class\": bem('tabs'),\n        \"model\": {\n          value: _this5.activeTab,\n          callback: function callback($$v) {\n            _this5.activeTab = $$v;\n          }\n        }\n      }, [this.tabs.map(this.renderTab)]);\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(\"div\", {\n      \"class\": bem()\n    }, [this.renderHeader(), this.renderTabs()]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}