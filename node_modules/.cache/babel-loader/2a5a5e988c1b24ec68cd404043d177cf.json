{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\"; // Utils\n\nimport { createNamespace, isObject, isDef } from '../utils';\nimport { route, routeProps } from '../utils/router'; // Mixins\n\nimport { ChildrenMixin } from '../mixins/relation'; // Components\n\nimport Icon from '../icon';\nimport Info from '../info';\n\nvar _createNamespace = createNamespace('tabbar-item'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1];\n\nexport default createComponent({\n  mixins: [ChildrenMixin('vanTabbar')],\n  props: _extends({}, routeProps, {\n    dot: Boolean,\n    icon: String,\n    name: [Number, String],\n    // @deprecated\n    info: [Number, String],\n    badge: [Number, String],\n    iconPrefix: String\n  }),\n  data: function data() {\n    return {\n      nameMatched: false\n    };\n  },\n  computed: {\n    active: function active() {\n      var routeMode = this.parent.route;\n\n      if (routeMode && '$route' in this) {\n        var to = this.to,\n            $route = this.$route;\n        var config = isObject(to) ? to : {\n          path: to\n        };\n        return !!$route.matched.find(function (r) {\n          // vue-router 3.x $route.matched[0].path is empty in / and its children paths\n          var path = r.path === '' ? '/' : r.path;\n          var pathMatched = config.path === path;\n          var nameMatched = isDef(config.name) && config.name === r.name;\n          return pathMatched || nameMatched;\n        });\n      }\n\n      return this.nameMatched;\n    }\n  },\n  methods: {\n    onClick: function onClick(event) {\n      var _this = this;\n\n      if (!this.active) {\n        this.parent.triggerChange(this.name || this.index, function () {\n          route(_this.$router, _this);\n        });\n      }\n\n      this.$emit('click', event);\n    },\n    genIcon: function genIcon() {\n      var h = this.$createElement;\n      var slot = this.slots('icon', {\n        active: this.active\n      });\n\n      if (slot) {\n        return slot;\n      }\n\n      if (this.icon) {\n        return h(Icon, {\n          \"attrs\": {\n            \"name\": this.icon,\n            \"classPrefix\": this.iconPrefix\n          }\n        });\n      }\n    }\n  },\n  render: function render() {\n    var _this$badge;\n\n    var h = arguments[0];\n    var active = this.active;\n    var color = this.parent[active ? 'activeColor' : 'inactiveColor'];\n\n    if (process.env.NODE_ENV === 'development' && this.info) {\n      console.warn('[Vant] TabbarItem: \"info\" prop is deprecated, use \"badge\" prop instead.');\n    }\n\n    return h(\"div\", {\n      \"class\": bem({\n        active: active\n      }),\n      \"style\": {\n        color: color\n      },\n      \"on\": {\n        \"click\": this.onClick\n      }\n    }, [h(\"div\", {\n      \"class\": bem('icon')\n    }, [this.genIcon(), h(Info, {\n      \"attrs\": {\n        \"dot\": this.dot,\n        \"info\": (_this$badge = this.badge) != null ? _this$badge : this.info\n      }\n    })]), h(\"div\", {\n      \"class\": bem('text')\n    }, [this.slots('default', {\n      active: active\n    })])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}