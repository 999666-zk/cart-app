{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { createNamespace } from '../utils';\nimport { BORDER } from '../utils/constant';\n\nvar _createNamespace = createNamespace('pagination'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1],\n    t = _createNamespace[2];\n\nfunction makePage(number, text, active) {\n  return {\n    number: number,\n    text: text,\n    active: active\n  };\n}\n\nexport default createComponent({\n  props: {\n    prevText: String,\n    nextText: String,\n    forceEllipses: Boolean,\n    mode: {\n      type: String,\n      \"default\": 'multi'\n    },\n    value: {\n      type: Number,\n      \"default\": 0\n    },\n    pageCount: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    totalItems: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    itemsPerPage: {\n      type: [Number, String],\n      \"default\": 10\n    },\n    showPageSize: {\n      type: [Number, String],\n      \"default\": 5\n    }\n  },\n  computed: {\n    count: function count() {\n      var count = this.pageCount || Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(1, count);\n    },\n    pages: function pages() {\n      var pages = [];\n      var pageCount = this.count;\n      var showPageSize = +this.showPageSize;\n\n      if (this.mode !== 'multi') {\n        return pages;\n      } // Default page limits\n\n\n      var startPage = 1;\n      var endPage = pageCount;\n      var isMaxSized = showPageSize < pageCount; // recompute if showPageSize\n\n      if (isMaxSized) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(this.value - Math.floor(showPageSize / 2), 1);\n        endPage = startPage + showPageSize - 1; // Adjust if limit is exceeded\n\n        if (endPage > pageCount) {\n          endPage = pageCount;\n          startPage = endPage - showPageSize + 1;\n        }\n      } // Add page number links\n\n\n      for (var number = startPage; number <= endPage; number++) {\n        var page = makePage(number, number, number === this.value);\n        pages.push(page);\n      } // Add links to move between page sets\n\n\n      if (isMaxSized && showPageSize > 0 && this.forceEllipses) {\n        if (startPage > 1) {\n          var previousPageSet = makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < pageCount) {\n          var nextPageSet = makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    }\n  },\n  watch: {\n    value: {\n      handler: function handler(page) {\n        this.select(page || this.value);\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    select: function select(page, emitChange) {\n      page = Math.min(this.count, Math.max(1, page));\n\n      if (this.value !== page) {\n        this.$emit('input', page);\n\n        if (emitChange) {\n          this.$emit('change', page);\n        }\n      }\n    }\n  },\n  render: function render() {\n    var _this = this,\n        _this$slots,\n        _this$slots3;\n\n    var h = arguments[0];\n    var value = this.value;\n    var simple = this.mode !== 'multi';\n\n    var onSelect = function onSelect(value) {\n      return function () {\n        _this.select(value, true);\n      };\n    };\n\n    return h(\"ul\", {\n      \"class\": bem({\n        simple: simple\n      })\n    }, [h(\"li\", {\n      \"class\": [bem('item', {\n        disabled: value === 1\n      }), bem('prev'), BORDER],\n      \"on\": {\n        \"click\": onSelect(value - 1)\n      }\n    }, [((_this$slots = this.slots('prev-text')) != null ? _this$slots : this.prevText) || t('prev')]), this.pages.map(function (page) {\n      var _this$slots2;\n\n      return h(\"li\", {\n        \"class\": [bem('item', {\n          active: page.active\n        }), bem('page'), BORDER],\n        \"on\": {\n          \"click\": onSelect(page.number)\n        }\n      }, [(_this$slots2 = _this.slots('page', page)) != null ? _this$slots2 : page.text]);\n    }), simple && h(\"li\", {\n      \"class\": bem('page-desc')\n    }, [this.slots('pageDesc') || value + \"/\" + this.count]), h(\"li\", {\n      \"class\": [bem('item', {\n        disabled: value === this.count\n      }), bem('next'), BORDER],\n      \"on\": {\n        \"click\": onSelect(value + 1)\n      }\n    }, [((_this$slots3 = this.slots('next-text')) != null ? _this$slots3 : this.nextText) || t('next')])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}