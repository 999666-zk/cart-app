{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\n// Utils\nimport { raf } from '../utils/dom/raf';\nimport { isDate } from '../utils/validate/date';\nimport { getScrollTop } from '../utils/dom/scroll';\nimport { t, bem, copyDate, copyDates, getNextDay, compareDay, calcDateNum, compareMonth, createComponent, getDayByOffset } from './utils'; // Components\n\nimport Popup from '../popup';\nimport Button from '../button';\nimport Toast from '../toast';\nimport Month from './components/Month';\nimport Header from './components/Header';\nexport default createComponent({\n  props: {\n    title: String,\n    color: String,\n    value: Boolean,\n    readonly: Boolean,\n    formatter: Function,\n    rowHeight: [Number, String],\n    confirmText: String,\n    rangePrompt: String,\n    defaultDate: [Date, Array],\n    getContainer: [String, Function],\n    allowSameDay: Boolean,\n    confirmDisabledText: String,\n    type: {\n      type: String,\n      \"default\": 'single'\n    },\n    round: {\n      type: Boolean,\n      \"default\": true\n    },\n    position: {\n      type: String,\n      \"default\": 'bottom'\n    },\n    poppable: {\n      type: Boolean,\n      \"default\": true\n    },\n    maxRange: {\n      type: [Number, String],\n      \"default\": null\n    },\n    lazyRender: {\n      type: Boolean,\n      \"default\": true\n    },\n    showMark: {\n      type: Boolean,\n      \"default\": true\n    },\n    showTitle: {\n      type: Boolean,\n      \"default\": true\n    },\n    showConfirm: {\n      type: Boolean,\n      \"default\": true\n    },\n    showSubtitle: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeOnPopstate: {\n      type: Boolean,\n      \"default\": true\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      \"default\": true\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      \"default\": true\n    },\n    minDate: {\n      type: Date,\n      validator: isDate,\n      \"default\": function _default() {\n        return new Date();\n      }\n    },\n    maxDate: {\n      type: Date,\n      validator: isDate,\n      \"default\": function _default() {\n        var now = new Date();\n        return new Date(now.getFullYear(), now.getMonth() + 6, now.getDate());\n      }\n    },\n    firstDayOfWeek: {\n      type: [Number, String],\n      \"default\": 0,\n      validator: function validator(val) {\n        return val >= 0 && val <= 6;\n      }\n    }\n  },\n  inject: {\n    vanPopup: {\n      \"default\": null\n    }\n  },\n  data: function data() {\n    return {\n      subtitle: '',\n      currentDate: this.getInitialDate()\n    };\n  },\n  computed: {\n    months: function months() {\n      var months = [];\n      var cursor = new Date(this.minDate);\n      cursor.setDate(1);\n\n      do {\n        months.push(new Date(cursor));\n        cursor.setMonth(cursor.getMonth() + 1);\n      } while (compareMonth(cursor, this.maxDate) !== 1);\n\n      return months;\n    },\n    buttonDisabled: function buttonDisabled() {\n      var type = this.type,\n          currentDate = this.currentDate;\n\n      if (currentDate) {\n        if (type === 'range') {\n          return !currentDate[0] || !currentDate[1];\n        }\n\n        if (type === 'multiple') {\n          return !currentDate.length;\n        }\n      }\n\n      return !currentDate;\n    },\n    dayOffset: function dayOffset() {\n      return this.firstDayOfWeek ? this.firstDayOfWeek % 7 : 0;\n    }\n  },\n  watch: {\n    value: 'init',\n    type: function type() {\n      this.reset();\n    },\n    defaultDate: function defaultDate(val) {\n      this.currentDate = val;\n      this.scrollIntoView();\n    }\n  },\n  mounted: function mounted() {\n    var _this$vanPopup;\n\n    this.init(); // https://github.com/vant-ui/vant/issues/9845\n\n    (_this$vanPopup = this.vanPopup) == null ? void 0 : _this$vanPopup.$on('opened', this.onScroll);\n  },\n\n  /* istanbul ignore next */\n  activated: function activated() {\n    this.init();\n  },\n  methods: {\n    // @exposed-api\n    reset: function reset(date) {\n      if (date === void 0) {\n        date = this.getInitialDate();\n      }\n\n      this.currentDate = date;\n      this.scrollIntoView();\n    },\n    init: function init() {\n      var _this = this;\n\n      if (this.poppable && !this.value) {\n        return;\n      }\n\n      this.$nextTick(function () {\n        // add Math.floor to avoid decimal height issues\n        // https://github.com/vant-ui/vant/issues/5640\n        _this.bodyHeight = Math.floor(_this.$refs.body.getBoundingClientRect().height);\n\n        _this.onScroll();\n\n        _this.scrollIntoView();\n      });\n    },\n    // @exposed-api\n    scrollToDate: function scrollToDate(targetDate) {\n      var _this2 = this;\n\n      raf(function () {\n        var displayed = _this2.value || !_this2.poppable;\n        /* istanbul ignore if */\n\n        if (!targetDate || !displayed) {\n          return;\n        }\n\n        _this2.months.some(function (month, index) {\n          if (compareMonth(month, targetDate) === 0) {\n            var _this2$$refs = _this2.$refs,\n                body = _this2$$refs.body,\n                months = _this2$$refs.months;\n            months[index].scrollIntoView(body);\n            return true;\n          }\n\n          return false;\n        });\n\n        _this2.onScroll();\n      });\n    },\n    // scroll to current month\n    scrollIntoView: function scrollIntoView() {\n      var currentDate = this.currentDate;\n\n      if (currentDate) {\n        var targetDate = this.type === 'single' ? currentDate : currentDate[0];\n        this.scrollToDate(targetDate);\n      }\n    },\n    getInitialDate: function getInitialDate() {\n      var type = this.type,\n          minDate = this.minDate,\n          maxDate = this.maxDate,\n          defaultDate = this.defaultDate;\n\n      if (defaultDate === null) {\n        return defaultDate;\n      }\n\n      var defaultVal = new Date();\n\n      if (compareDay(defaultVal, minDate) === -1) {\n        defaultVal = minDate;\n      } else if (compareDay(defaultVal, maxDate) === 1) {\n        defaultVal = maxDate;\n      }\n\n      if (type === 'range') {\n        var _ref = defaultDate || [],\n            startDay = _ref[0],\n            endDay = _ref[1];\n\n        return [startDay || defaultVal, endDay || getNextDay(defaultVal)];\n      }\n\n      if (type === 'multiple') {\n        return defaultDate || [defaultVal];\n      }\n\n      return defaultDate || defaultVal;\n    },\n    // calculate the position of the elements\n    // and find the elements that needs to be rendered\n    onScroll: function onScroll() {\n      var _this$$refs = this.$refs,\n          body = _this$$refs.body,\n          months = _this$$refs.months;\n      var top = getScrollTop(body);\n      var bottom = top + this.bodyHeight;\n      var heights = months.map(function (item) {\n        return item.getHeight();\n      });\n      var heightSum = heights.reduce(function (a, b) {\n        return a + b;\n      }, 0); // iOS scroll bounce may exceed the range\n\n      if (bottom > heightSum && top > 0) {\n        return;\n      }\n\n      var height = 0;\n      var currentMonth;\n      var visibleRange = [-1, -1];\n\n      for (var i = 0; i < months.length; i++) {\n        var visible = height <= bottom && height + heights[i] >= top;\n\n        if (visible) {\n          visibleRange[1] = i;\n\n          if (!currentMonth) {\n            currentMonth = months[i];\n            visibleRange[0] = i;\n          }\n\n          if (!months[i].showed) {\n            months[i].showed = true;\n            this.$emit('month-show', {\n              date: months[i].date,\n              title: months[i].title\n            });\n          }\n        }\n\n        height += heights[i];\n      }\n\n      months.forEach(function (month, index) {\n        month.visible = index >= visibleRange[0] - 1 && index <= visibleRange[1] + 1;\n      });\n      /* istanbul ignore else */\n\n      if (currentMonth) {\n        this.subtitle = currentMonth.title;\n      }\n    },\n    onClickDay: function onClickDay(item) {\n      if (this.readonly) {\n        return;\n      }\n\n      var date = item.date;\n      var type = this.type,\n          currentDate = this.currentDate;\n\n      if (type === 'range') {\n        if (!currentDate) {\n          this.select([date, null]);\n          return;\n        }\n\n        var startDay = currentDate[0],\n            endDay = currentDate[1];\n\n        if (startDay && !endDay) {\n          var compareToStart = compareDay(date, startDay);\n\n          if (compareToStart === 1) {\n            this.select([startDay, date], true);\n          } else if (compareToStart === -1) {\n            this.select([date, null]);\n          } else if (this.allowSameDay) {\n            this.select([date, date], true);\n          }\n        } else {\n          this.select([date, null]);\n        }\n      } else if (type === 'multiple') {\n        if (!currentDate) {\n          this.select([date]);\n          return;\n        }\n\n        var selectedIndex;\n        var selected = this.currentDate.some(function (dateItem, index) {\n          var equal = compareDay(dateItem, date) === 0;\n\n          if (equal) {\n            selectedIndex = index;\n          }\n\n          return equal;\n        });\n\n        if (selected) {\n          var _currentDate$splice = currentDate.splice(selectedIndex, 1),\n              unselectedDate = _currentDate$splice[0];\n\n          this.$emit('unselect', copyDate(unselectedDate));\n        } else if (this.maxRange && currentDate.length >= this.maxRange) {\n          Toast(this.rangePrompt || t('rangePrompt', this.maxRange));\n        } else {\n          this.select([].concat(currentDate, [date]));\n        }\n      } else {\n        this.select(date, true);\n      }\n    },\n    togglePopup: function togglePopup(val) {\n      this.$emit('input', val);\n    },\n    select: function select(date, complete) {\n      var _this3 = this;\n\n      var emit = function emit(date) {\n        _this3.currentDate = date;\n\n        _this3.$emit('select', copyDates(_this3.currentDate));\n      };\n\n      if (complete && this.type === 'range') {\n        var valid = this.checkRange(date);\n\n        if (!valid) {\n          // auto selected to max range if showConfirm\n          if (this.showConfirm) {\n            emit([date[0], getDayByOffset(date[0], this.maxRange - 1)]);\n          } else {\n            emit(date);\n          }\n\n          return;\n        }\n      }\n\n      emit(date);\n\n      if (complete && !this.showConfirm) {\n        this.onConfirm();\n      }\n    },\n    checkRange: function checkRange(date) {\n      var maxRange = this.maxRange,\n          rangePrompt = this.rangePrompt;\n\n      if (maxRange && calcDateNum(date) > maxRange) {\n        Toast(rangePrompt || t('rangePrompt', maxRange));\n        return false;\n      }\n\n      return true;\n    },\n    onConfirm: function onConfirm() {\n      this.$emit('confirm', copyDates(this.currentDate));\n    },\n    genMonth: function genMonth(date, index) {\n      var h = this.$createElement;\n      var showMonthTitle = index !== 0 || !this.showSubtitle;\n      return h(Month, {\n        \"ref\": \"months\",\n        \"refInFor\": true,\n        \"attrs\": {\n          \"date\": date,\n          \"type\": this.type,\n          \"color\": this.color,\n          \"minDate\": this.minDate,\n          \"maxDate\": this.maxDate,\n          \"showMark\": this.showMark,\n          \"formatter\": this.formatter,\n          \"rowHeight\": this.rowHeight,\n          \"lazyRender\": this.lazyRender,\n          \"currentDate\": this.currentDate,\n          \"showSubtitle\": this.showSubtitle,\n          \"allowSameDay\": this.allowSameDay,\n          \"showMonthTitle\": showMonthTitle,\n          \"firstDayOfWeek\": this.dayOffset\n        },\n        \"scopedSlots\": {\n          'top-info': this.$scopedSlots['top-info'],\n          'bottom-info': this.$scopedSlots['bottom-info']\n        },\n        \"on\": {\n          \"click\": this.onClickDay\n        }\n      });\n    },\n    genFooterContent: function genFooterContent() {\n      var h = this.$createElement;\n      var slot = this.slots('footer');\n\n      if (slot) {\n        return slot;\n      }\n\n      if (this.showConfirm) {\n        var text = this.buttonDisabled ? this.confirmDisabledText : this.confirmText;\n        return h(Button, {\n          \"attrs\": {\n            \"round\": true,\n            \"block\": true,\n            \"type\": \"danger\",\n            \"color\": this.color,\n            \"disabled\": this.buttonDisabled,\n            \"nativeType\": \"button\"\n          },\n          \"class\": bem('confirm'),\n          \"on\": {\n            \"click\": this.onConfirm\n          }\n        }, [text || t('confirm')]);\n      }\n    },\n    genFooter: function genFooter() {\n      var h = this.$createElement;\n      return h(\"div\", {\n        \"class\": bem('footer', {\n          unfit: !this.safeAreaInsetBottom\n        })\n      }, [this.genFooterContent()]);\n    },\n    genCalendar: function genCalendar() {\n      var _this4 = this;\n\n      var h = this.$createElement;\n      return h(\"div\", {\n        \"class\": bem()\n      }, [h(Header, {\n        \"attrs\": {\n          \"title\": this.title,\n          \"showTitle\": this.showTitle,\n          \"subtitle\": this.subtitle,\n          \"showSubtitle\": this.showSubtitle,\n          \"firstDayOfWeek\": this.dayOffset\n        },\n        \"scopedSlots\": {\n          title: function title() {\n            return _this4.slots('title');\n          }\n        }\n      }), h(\"div\", {\n        \"ref\": \"body\",\n        \"class\": bem('body'),\n        \"on\": {\n          \"scroll\": this.onScroll\n        }\n      }, [this.months.map(this.genMonth)]), this.genFooter()]);\n    }\n  },\n  render: function render() {\n    var _this5 = this;\n\n    var h = arguments[0];\n\n    if (this.poppable) {\n      var _attrs;\n\n      var createListener = function createListener(name) {\n        return function () {\n          return _this5.$emit(name);\n        };\n      };\n\n      return h(Popup, {\n        \"attrs\": (_attrs = {\n          \"round\": true,\n          \"value\": this.value\n        }, _attrs[\"round\"] = this.round, _attrs[\"position\"] = this.position, _attrs[\"closeable\"] = this.showTitle || this.showSubtitle, _attrs[\"getContainer\"] = this.getContainer, _attrs[\"closeOnPopstate\"] = this.closeOnPopstate, _attrs[\"closeOnClickOverlay\"] = this.closeOnClickOverlay, _attrs),\n        \"class\": bem('popup'),\n        \"on\": {\n          \"input\": this.togglePopup,\n          \"open\": createListener('open'),\n          \"opened\": createListener('opened'),\n          \"close\": createListener('close'),\n          \"closed\": createListener('closed')\n        }\n      }, [this.genCalendar()]);\n    }\n\n    return this.genCalendar();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}