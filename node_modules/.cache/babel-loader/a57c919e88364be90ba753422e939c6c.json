{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.find.js\";\n// Utils\nimport { createNamespace } from '../../utils';\nimport { BORDER_BOTTOM } from '../../utils/constant'; // Mixins\n\nimport { ParentMixin } from '../../mixins/relation';\nimport { BindEventMixin } from '../../mixins/bind-event';\n\nvar _createNamespace = createNamespace('sku-row'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1],\n    t = _createNamespace[2];\n\nexport { bem };\nexport default createComponent({\n  mixins: [ParentMixin('vanSkuRows'), BindEventMixin(function (bind) {\n    if (this.scrollable && this.$refs.scroller) {\n      bind(this.$refs.scroller, 'scroll', this.onScroll);\n    }\n  })],\n  props: {\n    skuRow: Object\n  },\n  data: function data() {\n    return {\n      progress: 0\n    };\n  },\n  computed: {\n    scrollable: function scrollable() {\n      return this.skuRow.largeImageMode && this.skuRow.v.length > 6;\n    }\n  },\n  methods: {\n    onScroll: function onScroll() {\n      var _this$$refs = this.$refs,\n          scroller = _this$$refs.scroller,\n          row = _this$$refs.row;\n      var distance = row.offsetWidth - scroller.offsetWidth;\n      this.progress = scroller.scrollLeft / distance;\n    },\n    genTitle: function genTitle() {\n      var h = this.$createElement;\n      return h(\"div\", {\n        \"class\": bem('title')\n      }, [this.skuRow.k, this.skuRow.is_multiple && h(\"span\", {\n        \"class\": bem('title-multiple')\n      }, [\"\\uFF08\", t('multiple'), \"\\uFF09\"])]);\n    },\n    genIndicator: function genIndicator() {\n      var h = this.$createElement;\n\n      if (this.scrollable) {\n        var style = {\n          transform: \"translate3d(\" + this.progress * 20 + \"px, 0, 0)\"\n        };\n        return h(\"div\", {\n          \"class\": bem('indicator-wrapper')\n        }, [h(\"div\", {\n          \"class\": bem('indicator')\n        }, [h(\"div\", {\n          \"class\": bem('indicator-slider'),\n          \"style\": style\n        })])]);\n      }\n    },\n    genContent: function genContent() {\n      var h = this.$createElement;\n      var nodes = this.slots();\n\n      if (this.skuRow.largeImageMode) {\n        var top = [];\n        var bottom = [];\n        nodes.forEach(function (node, index) {\n          var group = Math.floor(index / 3) % 2 === 0 ? top : bottom;\n          group.push(node);\n        });\n        return h(\"div\", {\n          \"class\": bem('scroller'),\n          \"ref\": \"scroller\"\n        }, [h(\"div\", {\n          \"class\": bem('row'),\n          \"ref\": \"row\"\n        }, [top]), bottom.length ? h(\"div\", {\n          \"class\": bem('row')\n        }, [bottom]) : null]);\n      }\n\n      return nodes;\n    },\n    centerItem: function centerItem(selectSkuId) {\n      if (!this.skuRow.largeImageMode || !selectSkuId) {\n        return;\n      }\n\n      var _this$children = this.children,\n          children = _this$children === void 0 ? [] : _this$children;\n      var _this$$refs2 = this.$refs,\n          scroller = _this$$refs2.scroller,\n          row = _this$$refs2.row;\n      var child = children.find(function (it) {\n        return +it.skuValue.id === +selectSkuId;\n      });\n\n      if (scroller && row && child && child.$el) {\n        var target = child.$el;\n        var to = target.offsetLeft - (scroller.offsetWidth - target.offsetWidth) / 2;\n        scroller.scrollLeft = to;\n      }\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(\"div\", {\n      \"class\": [bem(), BORDER_BOTTOM]\n    }, [this.genTitle(), this.genContent(), this.genIndicator()]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}