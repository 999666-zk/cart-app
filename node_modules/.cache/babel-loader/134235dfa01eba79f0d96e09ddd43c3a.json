{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport { createNamespace, isObject, addUnit } from '../utils';\nimport { raf, cancelRaf } from '../utils/dom/raf';\n\nvar _createNamespace = createNamespace('circle'),\n    createComponent = _createNamespace[0],\n    bem = _createNamespace[1];\n\nvar PERIMETER = 3140;\nvar uid = 0;\n\nfunction format(rate) {\n  return Math.min(Math.max(rate, 0), 100);\n}\n\nfunction getPath(clockwise, viewBoxSize) {\n  var sweepFlag = clockwise ? 1 : 0;\n  return \"M \" + viewBoxSize / 2 + \" \" + viewBoxSize / 2 + \" m 0, -500 a 500, 500 0 1, \" + sweepFlag + \" 0, 1000 a 500, 500 0 1, \" + sweepFlag + \" 0, -1000\";\n}\n\nexport default createComponent({\n  props: {\n    text: String,\n    size: [Number, String],\n    color: [String, Object],\n    layerColor: String,\n    strokeLinecap: String,\n    value: {\n      type: Number,\n      \"default\": 0\n    },\n    speed: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    fill: {\n      type: String,\n      \"default\": 'none'\n    },\n    rate: {\n      type: [Number, String],\n      \"default\": 100\n    },\n    strokeWidth: {\n      type: [Number, String],\n      \"default\": 40\n    },\n    clockwise: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    this.uid = \"van-circle-gradient-\" + uid++;\n  },\n  computed: {\n    style: function style() {\n      var size = addUnit(this.size);\n      return {\n        width: size,\n        height: size\n      };\n    },\n    path: function path() {\n      return getPath(this.clockwise, this.viewBoxSize);\n    },\n    viewBoxSize: function viewBoxSize() {\n      return +this.strokeWidth + 1000;\n    },\n    layerStyle: function layerStyle() {\n      return {\n        fill: \"\" + this.fill,\n        stroke: \"\" + this.layerColor,\n        strokeWidth: this.strokeWidth + \"px\"\n      };\n    },\n    hoverStyle: function hoverStyle() {\n      var offset = PERIMETER * this.value / 100;\n      return {\n        stroke: \"\" + (this.gradient ? \"url(#\" + this.uid + \")\" : this.color),\n        strokeWidth: +this.strokeWidth + 1 + \"px\",\n        strokeLinecap: this.strokeLinecap,\n        strokeDasharray: offset + \"px \" + PERIMETER + \"px\"\n      };\n    },\n    gradient: function gradient() {\n      return isObject(this.color);\n    },\n    LinearGradient: function LinearGradient() {\n      var _this = this;\n\n      var h = this.$createElement;\n\n      if (!this.gradient) {\n        return;\n      }\n\n      var Stops = Object.keys(this.color).sort(function (a, b) {\n        return parseFloat(a) - parseFloat(b);\n      }).map(function (key, index) {\n        return h(\"stop\", {\n          \"key\": index,\n          \"attrs\": {\n            \"offset\": key,\n            \"stop-color\": _this.color[key]\n          }\n        });\n      });\n      return h(\"defs\", [h(\"linearGradient\", {\n        \"attrs\": {\n          \"id\": this.uid,\n          \"x1\": \"100%\",\n          \"y1\": \"0%\",\n          \"x2\": \"0%\",\n          \"y2\": \"0%\"\n        }\n      }, [Stops])]);\n    }\n  },\n  watch: {\n    rate: {\n      handler: function handler(rate) {\n        this.startTime = Date.now();\n        this.startRate = this.value;\n        this.endRate = format(rate);\n        this.increase = this.endRate > this.startRate;\n        this.duration = Math.abs((this.startRate - this.endRate) * 1000 / this.speed);\n\n        if (this.speed) {\n          cancelRaf(this.rafId);\n          this.rafId = raf(this.animate);\n        } else {\n          this.$emit('input', this.endRate);\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    animate: function animate() {\n      var now = Date.now();\n      var progress = Math.min((now - this.startTime) / this.duration, 1);\n      var rate = progress * (this.endRate - this.startRate) + this.startRate;\n      this.$emit('input', format(parseFloat(rate.toFixed(1))));\n\n      if (this.increase ? rate < this.endRate : rate > this.endRate) {\n        this.rafId = raf(this.animate);\n      }\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(\"div\", {\n      \"class\": bem(),\n      \"style\": this.style\n    }, [h(\"svg\", {\n      \"attrs\": {\n        \"viewBox\": \"0 0 \" + this.viewBoxSize + \" \" + this.viewBoxSize\n      }\n    }, [this.LinearGradient, h(\"path\", {\n      \"class\": bem('layer'),\n      \"style\": this.layerStyle,\n      \"attrs\": {\n        \"d\": this.path\n      }\n    }), h(\"path\", {\n      \"attrs\": {\n        \"d\": this.path\n      },\n      \"class\": bem('hover'),\n      \"style\": this.hoverStyle\n    })]), this.slots() || this.text && h(\"div\", {\n      \"class\": bem('text')\n    }, [this.text])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}